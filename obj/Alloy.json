{
  "tagname": "class",
  "name": "Alloy",
  "doc": "<p>Top-level module for Alloy functions.</p>\n\n<p>Alloy is an application framework built on top of the Titanium SDK designed to help rapidly\ndevelop high quality applications and reduce maintenance.</p>\n\n<p>Alloy uses the model-view-controller architecture to separate the application into three\ncomponents:</p>\n\n<ul>\n<li><p><strong>Models</strong> provide the data of the application. Alloy utilizes <strong>Backbone Model and Collection</strong>\n objects for this functionality.</p></li>\n<li><p><strong>Views</strong> provide the UI components to interact with the application, written using <strong>XML markup</strong>\nand <strong>Titanium Stylesheets (TSS)</strong>, which abstracts the UI components of the Titanium API.</p></li>\n<li><p><strong>Controllers</strong> provide the glue layer between the Model and View components as well as\nadditional application logic using the <strong>Alloy API</strong> and <strong>Titanium API</strong>.</p></li>\n</ul>\n\n\n<p>The API documentation provided here is used with Alloy Controllers and Widget Controllers to\ninteract with the View and Model components of the application or widget.</p>\n\n<p>For guides on using Alloy, see\n<a href=\"http://docs.appcelerator.com/titanium/latest/#!/guide/Alloy_Framework\">Alloy Framework</a>.</p>\n",
  "extends": null,
  "mixins": [

  ],
  "alternateClassNames": [

  ],
  "aliases": {
  },
  "singleton": false,
  "requires": [

  ],
  "uses": [

  ],
  "code_type": "assignment",
  "inheritable": false,
  "inheritdoc": null,
  "meta": {
  },
  "id": "class-Alloy",
  "members": {
    "cfg": [

    ],
    "property": [

    ],
    "method": [

    ],
    "event": [

    ],
    "css_var": [

    ],
    "css_mixin": [

    ]
  },
  "statics": {
    "cfg": [

    ],
    "property": [
      {
        "tagname": "property",
        "name": "CFG",
        "owner": "Alloy",
        "type": "Object",
        "doc": "<p>An object that stores Alloy configuration values as defined in your app's\napp/config.json file. Here's what a typical config.json file might look\nlike in an Alloy app.</p>\n\n<pre><code>{\n    \"global\": { \"key\": \"defaultValue\", \"anotherKey\": 12345 },\n    \"env:development\": {},\n    \"env:test\": {},\n    \"env:production\": {},\n    \"os:ios\": { \"key\": \"iosValue\" },\n    \"os:android\": { \"key\": \"androidValue\" },\n    \"dependencies\": {}\n}\n</code></pre>\n\n<p>If this app was compiled for iOS, the <a href=\"#!/api/Alloy-static-property-CFG\" rel=\"Alloy-static-property-CFG\" class=\"docClass\">Alloy.CFG</a> would look like this:</p>\n\n<pre><code><a href=\"#!/api/Alloy-static-property-CFG\" rel=\"Alloy-static-property-CFG\" class=\"docClass\">Alloy.CFG</a> = {\n    \"key\": \"iosValue\",\n    \"anotherKey\": 12345\n}\n</code></pre>\n\n<p><a href=\"#!/api/Alloy-static-property-CFG\" rel=\"Alloy-static-property-CFG\" class=\"docClass\">Alloy.CFG</a> is accessible in any controller in your app, and can be accessed\nin other non-controller Javascript files like this:</p>\n\n<pre><code>var theKey = require('alloy').CFG.key;\n</code></pre>\n",
        "default": null,
        "properties": null,
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-property-CFG",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy.js",
            "linenr": 577
          }
        ],
        "shortDoc": "An object that stores Alloy configuration values as defined in your app's\napp/config.json file. ...",
        "html_type": "Object",
        "html_meta": {
          "static": null
        }
      },
      {
        "tagname": "property",
        "name": "Collections",
        "owner": "Alloy",
        "type": "Object",
        "doc": "<p>An object for storing globally accessible Alloy collections. Singleton collections\ncreated via markup will be stored on this object.</p>\n\n<pre><code>&lt;Collection src=\"myModel\"/&gt;\n</code></pre>\n\n<p>The above markup would effectively generate the following code:</p>\n\n<pre><code>Alloy.Collections.myModel = <a href=\"#!/api/Alloy-static-method-createCollection\" rel=\"Alloy-static-method-createCollection\" class=\"docClass\">Alloy.createCollection</a>('MyModel');\n</code></pre>\n\n<p>Alloy.Collections.myModel would then be accessible in any controller in your app.</p>\n",
        "default": "{}",
        "properties": null,
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-property-Collections",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy.js",
            "linenr": 551
          }
        ],
        "shortDoc": "An object for storing globally accessible Alloy collections. ...",
        "html_type": "Object",
        "html_meta": {
          "static": null
        }
      },
      {
        "tagname": "property",
        "name": "Globals",
        "owner": "Alloy",
        "type": "Object",
        "doc": "<p>An object for storing globally accessible variables and functions.\n<a href=\"#!/api/Alloy-static-property-Globals\" rel=\"Alloy-static-property-Globals\" class=\"docClass\">Alloy.Globals</a> is accessible in any controller in your app:</p>\n\n<pre><code>Alloy.Globals.someGlobalObject = { key: 'value' };\nAlloy.Globals.someGlobalFunction = function(){};\n</code></pre>\n\n<p><a href=\"#!/api/Alloy-static-property-Globals\" rel=\"Alloy-static-property-Globals\" class=\"docClass\">Alloy.Globals</a> can be accessed in other non-controller Javascript files\nlike this:</p>\n\n<pre><code>var theObject = require('alloy').Globals.someGlobalObject;\n</code></pre>\n",
        "default": "{}",
        "properties": null,
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-property-Globals",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy.js",
            "linenr": 508
          }
        ],
        "shortDoc": "An object for storing globally accessible variables and functions. ...",
        "html_type": "Object",
        "html_meta": {
          "static": null
        }
      },
      {
        "tagname": "property",
        "name": "Models",
        "owner": "Alloy",
        "type": "Object",
        "doc": "<p>An object for storing globally accessible Alloy models. Singleton models\ncreated via markup will be stored on this object.</p>\n\n<pre><code>&lt;Model src=\"myModel\"/&gt;\n</code></pre>\n\n<p>The above markup would effectively generate the following code:</p>\n\n<pre><code>Alloy.Models.myModel = <a href=\"#!/api/Alloy-static-method-createModel\" rel=\"Alloy-static-method-createModel\" class=\"docClass\">Alloy.createModel</a>('MyModel');\n</code></pre>\n\n<p>Alloy.Models.myModel would then be accessible in any controller in your app.</p>\n",
        "default": "{}",
        "properties": null,
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-property-Models",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy.js",
            "linenr": 525
          }
        ],
        "shortDoc": "An object for storing globally accessible Alloy models. ...",
        "html_type": "Object",
        "html_meta": {
          "static": null
        }
      },
      {
        "tagname": "property",
        "name": "isHandheld",
        "owner": "Alloy",
        "type": "Boolean",
        "doc": "<p><code>true</code> if the current device is a handheld device (not a tablet).</p>\n",
        "default": null,
        "properties": null,
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-property-isHandheld",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy.js",
            "linenr": 500
          }
        ],
        "html_type": "Boolean",
        "html_meta": {
          "static": null
        }
      },
      {
        "tagname": "property",
        "name": "isTablet",
        "owner": "Alloy",
        "type": "Boolean",
        "doc": "<p><code>true</code> if the current device is a tablet.</p>\n",
        "default": null,
        "properties": null,
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-property-isTablet",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy.js",
            "linenr": 465
          }
        ],
        "html_type": "Boolean",
        "html_meta": {
          "static": null
        }
      }
    ],
    "method": [
      {
        "tagname": "method",
        "name": "createCollection",
        "owner": "Alloy",
        "doc": "<p>Factory method for instantiating a Backbone collection of model objects. Creates and returns a\ncollection for holding the named type of model objects.</p>\n\n<p>See <a href=\"http://docs.appcelerator.com/backbone/0.9.2/#Collection\">Backbone.Collection</a> in the Backbone.js\ndocumentation for  information on the methods and  properties provided by the\nCollection object.</p>\n",
        "params": [
          {
            "type": "String",
            "name": "name",
            "doc": "<p>Name of model to hold in this collection.</p>\n",
            "optional": false,
            "default": null,
            "properties": [

            ],
            "html_type": "String"
          },
          {
            "type": "Object",
            "name": "args",
            "doc": "<p>Arguments to pass to the collection.</p>\n",
            "optional": true,
            "default": null,
            "properties": [

            ],
            "html_type": "Object"
          }
        ],
        "return": {
          "type": "Backbone.Collection",
          "name": "return",
          "doc": "<p>Backbone collection object.</p>\n",
          "properties": null,
          "html_type": "Backbone.Collection"
        },
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-method-createCollection",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy.js",
            "linenr": 441
          }
        ],
        "shortDoc": "Factory method for instantiating a Backbone collection of model objects. ...",
        "html_meta": {
          "static": null
        }
      },
      {
        "tagname": "method",
        "name": "createController",
        "owner": "Alloy",
        "doc": "<p>Factory method for instantiating a controller. Creates and returns an instance of the\nnamed controller.</p>\n",
        "params": [
          {
            "type": "String",
            "name": "name",
            "doc": "<p>Name of controller to instantiate.</p>\n",
            "optional": false,
            "default": null,
            "properties": [

            ],
            "html_type": "String"
          },
          {
            "type": "Object",
            "name": "args",
            "doc": "<p>Arguments to pass to the controller.</p>\n",
            "optional": true,
            "default": null,
            "properties": [

            ],
            "html_type": "Object"
          }
        ],
        "return": {
          "type": "Alloy.Controller",
          "name": "return",
          "doc": "<p>Alloy controller object.</p>\n",
          "properties": null,
          "html_type": "Alloy.Controller"
        },
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-method-createController",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy.js",
            "linenr": 412
          }
        ],
        "shortDoc": "Factory method for instantiating a controller. ...",
        "html_meta": {
          "static": null
        }
      },
      {
        "tagname": "method",
        "name": "createModel",
        "owner": "Alloy",
        "doc": "<p>Factory method for instantiating a Backbone Model object. Creates and returns an instance of the\nnamed model.</p>\n\n<p>See <a href=\"http://docs.appcelerator.com/backbone/0.9.2/#Model\">Backbone.Model</a> in the Backbone.js documentation for\ninformation on the methods and properties provided by the Model object.</p>\n",
        "params": [
          {
            "type": "String",
            "name": "name",
            "doc": "<p>Name of model to instantiate.</p>\n",
            "optional": false,
            "default": null,
            "properties": [

            ],
            "html_type": "String"
          },
          {
            "type": "Object",
            "name": "args",
            "doc": "<p>Arguments to pass to the model.</p>\n",
            "optional": true,
            "default": null,
            "properties": [

            ],
            "html_type": "Object"
          }
        ],
        "return": {
          "type": "Backbone.Model",
          "name": "return",
          "doc": "<p>Backbone model object.</p>\n",
          "properties": null,
          "html_type": "Backbone.Model"
        },
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-method-createModel",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy.js",
            "linenr": 425
          }
        ],
        "shortDoc": "Factory method for instantiating a Backbone Model object. ...",
        "html_meta": {
          "static": null
        }
      },
      {
        "tagname": "method",
        "name": "createWidget",
        "owner": "Alloy",
        "doc": "<p>Factory method for instantiating a widget controller. Creates and returns an instance of the\nnamed widget.</p>\n",
        "params": [
          {
            "type": "String",
            "name": "id",
            "doc": "<p>Id of widget to instantiate.</p>\n",
            "optional": false,
            "default": null,
            "properties": [

            ],
            "html_type": "String"
          },
          {
            "type": "String",
            "name": "name",
            "doc": "<p>Name of the view within the widget to instantiate ('widget' by default)</p>\n",
            "optional": true,
            "default": "\"widget\"",
            "properties": [

            ],
            "html_type": "String"
          },
          {
            "type": "Object",
            "name": "args",
            "doc": "<p>Arguments to pass to the widget.</p>\n",
            "optional": true,
            "default": null,
            "properties": [

            ],
            "html_type": "Object"
          }
        ],
        "return": {
          "type": "Alloy.Controller",
          "name": "return",
          "doc": "<p>Alloy widget controller object.</p>\n",
          "properties": null,
          "html_type": "Alloy.Controller"
        },
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-method-createWidget",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy.js",
            "linenr": 393
          }
        ],
        "shortDoc": "Factory method for instantiating a widget controller. ...",
        "html_meta": {
          "static": null
        }
      }
    ],
    "event": [

    ],
    "css_var": [

    ],
    "css_mixin": [

    ]
  },
  "files": [
    {
      "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy.js",
      "linenr": 1
    },
    {
      "filename": "/Users/Mo/projects/alloy/Alloy/template/app.js",
      "linenr": 1
    }
  ],
  "private": null,
  "html_meta": {
  },
  "component": false,
  "superclasses": [

  ],
  "subclasses": [

  ],
  "mixedInto": [

  ],
  "parentMixins": [

  ]
}