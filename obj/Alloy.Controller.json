{
  "tagname": "class",
  "name": "Alloy.Controller",
  "doc": "<p>The base class for Alloy controllers.</p>\n\n<p>Each controller is associated with a UI hierarchy, defined in an XML file in the\n<code>views</code> folder. Each element in the view hierarchy is either a Titanium View\nor another Alloy controller or widget. Each Alloy controller or widget can additionally contain\nTitanium Views and/or more controllers and widgets.</p>\n",
  "extends": "Backbone.Events",
  "mixins": [

  ],
  "alternateClassNames": [

  ],
  "aliases": {
  },
  "singleton": false,
  "requires": [

  ],
  "uses": [

  ],
  "code_type": "assignment",
  "inheritable": false,
  "inheritdoc": null,
  "meta": {
  },
  "id": "class-Alloy.Controller",
  "members": {
    "cfg": [

    ],
    "property": [

    ],
    "method": [

    ],
    "event": [

    ],
    "css_var": [

    ],
    "css_mixin": [

    ]
  },
  "statics": {
    "cfg": [

    ],
    "property": [

    ],
    "method": [
      {
        "tagname": "method",
        "name": "addClass",
        "owner": "Alloy.Controller",
        "doc": "<p>Adds a TSS class to the specified view object.</p>\n\n<p>You can apply additional styles with the <code>opts</code> parameter. To use this method\neffectively you may need to enable autostyling\non the target XML view. See <a href=\"#!/guide/Dynamic_Styles-section-37530415_DynamicStyles-Autostyle\">Autostyle</a>\nin the Alloy developer guide.</p>\n\n<h4>Example</h4>\n\n<p>The following adds the TSS classes \".redbg\" and \".bigger\" to a Titanium.UI.Label\nobject proxy <code>label1</code>, and also sets the label's <code>text</code> property to \"Cancel\".</p>\n\n<pre><code>// index.js\n$.addClass($.label1, 'redbg bigger', {text: \"Cancel\"});\n</code></pre>\n\n<p>The 'redbg' and 'bigger' classes are shown below:</p>\n\n<pre><code>// index.tss\n\".redbg\" : {\n    color: 'red'\n}\n\".bigger\": {\n    font : {\n       fontSize: '36'    \n    }\n}\n</code></pre>\n",
        "params": [
          {
            "type": "Object",
            "name": "proxy",
            "doc": "<p>View object to which to add class(es).</p>\n",
            "optional": false,
            "default": null,
            "properties": [

            ],
            "html_type": "Object"
          },
          {
            "type": "Array<String>/String",
            "name": "classes",
            "doc": "<p>Array or space-separated list of classes to apply.</p>\n",
            "optional": false,
            "default": null,
            "properties": [

            ],
            "html_type": "Array<String>/String"
          },
          {
            "type": "Dictionary",
            "name": "opts",
            "doc": "<p>Dictionary of properties to apply after classes have been added.\n@since 1.2.0</p>\n",
            "optional": true,
            "default": null,
            "properties": [

            ],
            "html_type": "Dictionary"
          }
        ],
        "return": {
          "type": "undefined",
          "name": "return",
          "doc": "\n",
          "properties": [

          ],
          "html_type": "undefined"
        },
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-method-addClass",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy/controllers/BaseController.js",
            "linenr": 273
          }
        ],
        "shortDoc": "Adds a TSS class to the specified view object. ...",
        "html_meta": {
          "static": null
        }
      },
      {
        "tagname": "method",
        "name": "createStyle",
        "owner": "Alloy.Controller",
        "doc": "<p>Creates a dictionary of properties based on the specified styles.</p>\n\n<p>You can use this dictionary with the view object's\napplyProperties method\nor a create object method, such as Titanium.UI.createView.</p>\n\n<h4>Examples</h4>\n\n<p>The following creates a new style object that is passed as a parameter\nto the Ti.UI.createLabel() method.</p>\n\n<pre><code>var styleArgs = {\napiName: 'Ti.UI.Label',\n    classes: ['blue','shadow','large'],\n    id: 'tester',\n    borderWidth: 2,\n    borderRadius: 16,\n    borderColor: '#000'\n};\nvar styleObject = $.createStyle(styleArgs);\ntestLabel = Ti.UI.createLabel(styleObject);  \n</code></pre>\n\n<p>The next example uses the applyProperties() method\nto apply a style object to an existing Button control (button not shown).</p>\n\n<pre><code>var style = $.createStyle({\n    classes: args.button,\n    apiName: 'Button',\n    color: 'blue'\n});\n$.button.applyProperties(style);\n</code></pre>\n",
        "params": [
          {
            "type": "AlloyStyleDict",
            "name": "opts",
            "doc": "<p>Dictionary of styles to apply.</p>\n",
            "optional": false,
            "default": null,
            "properties": [

            ],
            "html_type": "AlloyStyleDict"
          }
        ],
        "return": {
          "type": "Dictionary",
          "name": "return",
          "doc": "<p>@since 1.2.0</p>\n",
          "properties": null,
          "html_type": "Dictionary"
        },
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-method-createStyle",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy/controllers/BaseController.js",
            "linenr": 221
          }
        ],
        "shortDoc": "Creates a dictionary of properties based on the specified styles. ...",
        "html_meta": {
          "static": null
        }
      },
      {
        "tagname": "method",
        "name": "destroy",
        "owner": "Alloy.Controller",
        "doc": "<p>Frees binding resources associated with this controller and its\nUI components. It is critical that this is called when employing\nmodel/collection binding in order to avoid potential memory leaks.\n$.destroy() should be called whenever a controller's UI is to\nbe \"closed\" or removed from the app. See the <a href=\"#!/guide/Destroying_Data_Bindings\">Destroying Data Bindings</a>\ntest application for an example of this approach.</p>\n\n<h4>Example</h4>\n\n<p>In the following example the view-controller for a Window object named <code>dialog</code>\ncalls its <code>destroy()</code> method in response to the Window object being closed.</p>\n\n<pre><code>$.dialog.addEventListener('close', function() {\n    $.destroy();\n});\n</code></pre>\n",
        "params": [

        ],
        "return": {
          "type": "undefined",
          "name": "return",
          "doc": "\n",
          "properties": [

          ],
          "html_type": "undefined"
        },
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-method-destroy",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy/controllers/BaseController.js",
            "linenr": 163
          }
        ],
        "shortDoc": "Frees binding resources associated with this controller and its\nUI components. ...",
        "html_meta": {
          "static": null
        }
      },
      {
        "tagname": "method",
        "name": "getTopLevelViews",
        "owner": "Alloy.Controller",
        "doc": "<p>Returns a list of the root view elements associated with this controller.</p>\n\n<h4>Example</h4>\n\n<p>The following example displays the <code>id</code> of each top-level view associated with the\ncontroller:</p>\n\n<pre><code>// index.js\nvar views = $.getTopLevelViews();\nfor (each in views) {\n    var view = views[each];\n    console.log(view.id);\n}\n</code></pre>\n",
        "params": [

        ],
        "return": {
          "type": "Array.<(Titanium.UI.View|Alloy.Controller)>",
          "name": "return",
          "doc": "\n",
          "properties": null,
          "html_type": "Array.<(Titanium.UI.View|Alloy.Controller)>"
        },
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-method-getTopLevelViews",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy/controllers/BaseController.js",
            "linenr": 60
          }
        ],
        "shortDoc": "Returns a list of the root view elements associated with this controller. ...",
        "html_meta": {
          "static": null
        }
      },
      {
        "tagname": "method",
        "name": "getView",
        "owner": "Alloy.Controller",
        "doc": "<p>Returns the specified view associated with this controller.</p>\n\n<p>If no <code>id</code> is specified, returns the first top-level view.</p>\n\n<h4>Example</h4>\n\n<p>The following example gets a reference to a <code>&lt;Window/&gt;</code> object\nwith the <code>id</code> of \"loginWin\" and then calls its <a href=\"Titanium.UI.Window\">open()</a> method.</p>\n\n<pre><code>var loginWindow = $.getView('loginWin');\nloginWindow.open();\n</code></pre>\n",
        "params": [
          {
            "type": "String",
            "name": "id",
            "doc": "<p>ID of the view to return.</p>\n",
            "optional": true,
            "default": null,
            "properties": [

            ],
            "html_type": "String"
          }
        ],
        "return": {
          "type": "Titanium.UI.View/Alloy.Controller",
          "name": "return",
          "doc": "\n",
          "properties": null,
          "html_type": "Titanium.UI.View/Alloy.Controller"
        },
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-method-getView",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy/controllers/BaseController.js",
            "linenr": 84
          }
        ],
        "shortDoc": "Returns the specified view associated with this controller. ...",
        "html_meta": {
          "static": null
        }
      },
      {
        "tagname": "method",
        "name": "getViews",
        "owner": "Alloy.Controller",
        "doc": "<p>Returns a list of all IDed view elements associated with this controller.</p>\n\n<h4>Example</h4>\n\n<p>Given the following XML view:</p>\n\n<pre><code>&lt;Alloy&gt;\n    &lt;TabGroup id=\"tabs\"&gt;\n        &lt;Tab title=\"Tab 1\" icon=\"KS_nav_ui.png\" id=\"tab1\"&gt;\n            &lt;Window title=\"Tab 1\" id=\"win1\"&gt;\n                &lt;Label id=\"label1\"&gt;I am Window 1&lt;/Label&gt;\n            &lt;/Window&gt;\n        &lt;/Tab&gt;\n        &lt;Tab title=\"Tab 2\" icon=\"KS_nav_views.png\" id=\"tab2\"&gt;\n            &lt;Window title=\"Tab 2\" id=\"wind2\"&gt;\n                &lt;Label id=\"label2\"&gt;I am Window 2&lt;/Label&gt;\n            &lt;/Window&gt;\n        &lt;/Tab&gt;\n    &lt;/TabGroup&gt;\n    &lt;View id=\"otherview\"&gt;&lt;/View&gt;\n&lt;/Alloy&gt;         \n</code></pre>\n\n<p>The following view-controller outputs the id of each view in the hierarchy.</p>\n\n<pre><code>var views = $.getViews();\nfor (each in views) {\n    var view = views[each];\n    console.log(view.id);\n}   \n\n[INFO] :   win1\n[INFO] :   label1\n[INFO] :   tab1\n[INFO] :   wind2\n[INFO] :   label2\n[INFO] :   tab2\n[INFO] :   tabs\n[INFO] :   otherview\n</code></pre>\n",
        "params": [

        ],
        "return": {
          "type": "Array.<(Titanium.UI.View|Alloy.Controller)>",
          "name": "return",
          "doc": "\n",
          "properties": null,
          "html_type": "Array.<(Titanium.UI.View|Alloy.Controller)>"
        },
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-method-getViews",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy/controllers/BaseController.js",
            "linenr": 116
          }
        ],
        "shortDoc": "Returns a list of all IDed view elements associated with this controller. ...",
        "html_meta": {
          "static": null
        }
      },
      {
        "tagname": "method",
        "name": "removeClass",
        "owner": "Alloy.Controller",
        "doc": "<p>Removes a TSS class from the specified view object.</p>\n\n<p>You can apply additional styles after the removal with the <code>opts</code> parameter.\nTo use this method effectively you may need to enable autostyling\non the target XML view. See <a href=\"#!/guide/Dynamic_Styles-section-37530415_DynamicStyles-Autostyle\">Autostyle</a>\nin the Alloy developer guide.</p>\n\n<h4>Example</h4>\n\n<p>The following removes the \"redbg\" and \"bigger\" TSS classes from a Titanium.UI.Label\nobject proxy <code>label1</code>, and also sets the label's <code>text</code> property to \"...\".</p>\n\n<pre><code>$.removeClass($.label1, 'redbg bigger', {text: \"...\"});\n</code></pre>\n",
        "params": [
          {
            "type": "Object",
            "name": "proxy",
            "doc": "<p>View object from which to remove class(es).</p>\n",
            "optional": false,
            "default": null,
            "properties": [

            ],
            "html_type": "Object"
          },
          {
            "type": "Array<String>/String",
            "name": "classes",
            "doc": "<p>Array or space-separated list of classes to remove.</p>\n",
            "optional": false,
            "default": null,
            "properties": [

            ],
            "html_type": "Array<String>/String"
          },
          {
            "type": "Dictionary",
            "name": "opts",
            "doc": "<p>Dictionary of properties to apply after the class removal.\n@since 1.2.0</p>\n",
            "optional": true,
            "default": null,
            "properties": [

            ],
            "html_type": "Dictionary"
          }
        ],
        "return": {
          "type": "undefined",
          "name": "return",
          "doc": "\n",
          "properties": [

          ],
          "html_type": "undefined"
        },
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-method-removeClass",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy/controllers/BaseController.js",
            "linenr": 310
          }
        ],
        "shortDoc": "Removes a TSS class from the specified view object. ...",
        "html_meta": {
          "static": null
        }
      },
      {
        "tagname": "method",
        "name": "resetClass",
        "owner": "Alloy.Controller",
        "doc": "<p>Sets the array of TSS classes for the target View object, adding the classes specified and\nremoving any applied classes that are not specified.</p>\n\n<p>You can apply classes or styles after the reset using the <code>classes</code> or <code>opts</code> parameters.\nTo use this method effectively you may need to enable autostyling\non the target XML view. See <a href=\"#!/guide/Dynamic_Styles-section-37530415_DynamicStyles-Autostyle\">Autostyle</a>\nin the Alloy developer guide.</p>\n\n<h4>Example</h4>\n\n<p>The following removes all previously applied styles on <code>label1</code> and then applies\nthe TSS class 'no-style'.</p>\n\n<pre><code>$.resetClass($.label1, 'no-style');\n</code></pre>\n",
        "params": [
          {
            "type": "Object",
            "name": "proxy",
            "doc": "<p>View object to reset.</p>\n",
            "optional": false,
            "default": null,
            "properties": [

            ],
            "html_type": "Object"
          },
          {
            "type": "Array<String>/String",
            "name": "classes",
            "doc": "<p>Array or space-separated list of classes to apply after the reset.</p>\n",
            "optional": true,
            "default": null,
            "properties": [

            ],
            "html_type": "Array<String>/String"
          },
          {
            "type": "Dictionary",
            "name": "opts",
            "doc": "<p>Dictionary of properties to apply after the reset.\n@since 1.2.0</p>\n",
            "optional": true,
            "default": null,
            "properties": [

            ],
            "html_type": "Dictionary"
          }
        ],
        "return": {
          "type": "undefined",
          "name": "return",
          "doc": "\n",
          "properties": [

          ],
          "html_type": "undefined"
        },
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-method-resetClass",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy/controllers/BaseController.js",
            "linenr": 334
          }
        ],
        "shortDoc": "Sets the array of TSS classes for the target View object, adding the classes specified and\nremoving any applied class...",
        "html_meta": {
          "static": null
        }
      },
      {
        "tagname": "method",
        "name": "updateViews",
        "owner": "Alloy.Controller",
        "doc": "<p>Applies a set of properties to view elements associated with this controller.\nThis method is useful for setting properties on repeated elements such as\nTableViewRow objects, rather than needing to have a controller\nfor those child controllers.</p>\n\n<h4>Example</h4>\n\n<p>The following example uses this method to update a Label inside a TableViewRow object\nbefore adding it to a TableView.</p>\n\n<p>View-controller file: controllers/index.js</p>\n\n<pre><code>for (var i=0; i &lt; 10; i++) {\n  var row = <a href=\"#!/api/Alloy-static-method-createController\" rel=\"Alloy-static-method-createController\" class=\"docClass\">Alloy.createController</a>(\"tablerow\");\n  row.updateViews({\n    \"#theLabel\": {\n        text: \"I am row #\" + i\n    }\n  });  \n  $.tableView.appendRow(row.getView());\n};\n</code></pre>\n\n<p>XML view: views/tablerow.xml</p>\n\n<pre><code>&lt;Alloy&gt;\n    &lt;TableViewRow&gt;\n        &lt;Label id=\"theLabel\"&gt;&lt;/Label&gt;\n    &lt;/TableViewRow&gt;\n&lt;/Alloy&gt;     \n</code></pre>\n\n<p>XML view: views/index.xml</p>\n\n<pre><code>&lt;TableView id=\"tableView\"&gt;\n&lt;/TableView&gt;\n</code></pre>\n",
        "params": [
          {
            "type": "Object",
            "name": "args",
            "doc": "<p>An object whose keys are the IDs (in form '#id') of views to which the styles will be applied.\n@since 1.4.0</p>\n",
            "optional": false,
            "default": null,
            "properties": [

            ],
            "html_type": "Object"
          }
        ],
        "return": {
          "type": "undefined",
          "name": "return",
          "doc": "\n",
          "properties": [

          ],
          "html_type": "undefined"
        },
        "inheritable": false,
        "inheritdoc": null,
        "meta": {
          "static": true
        },
        "id": "static-method-updateViews",
        "files": [
          {
            "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy/controllers/BaseController.js",
            "linenr": 359
          }
        ],
        "shortDoc": "Applies a set of properties to view elements associated with this controller. ...",
        "html_meta": {
          "static": null
        }
      }
    ],
    "event": [

    ],
    "css_var": [

    ],
    "css_mixin": [

    ]
  },
  "files": [
    {
      "filename": "/Users/Mo/projects/alloy/Alloy/lib/alloy/controllers/BaseController.js",
      "linenr": 5
    }
  ],
  "html_meta": {
  },
  "component": false,
  "superclasses": [
    "Backbone.Events"
  ],
  "subclasses": [

  ],
  "mixedInto": [

  ],
  "parentMixins": [

  ]
}